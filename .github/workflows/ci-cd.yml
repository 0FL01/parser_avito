name: CI/CD Pipeline

on:
  push:
    branches: [ dev ] # Assuming 'dev' is the correct branch based on the file content
  pull_request:
    branches: [ dev ] # Assuming 'dev' is the correct branch

env:
  DOCKER_IMAGE_NAME: avito-parser
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  VERSION: ${{ github.sha }}
  SHORT_VERSION: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      URL_AVITO: ${{ secrets.URL_AVITO }}
      CHAT_ID_TG: ${{ secrets.CHAT_ID_TG }}
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      NUM_ADS_AVITO: ${{ secrets.NUM_ADS_AVITO }}
      FREQ_AVITO: ${{ secrets.FREQ_AVITO }}
      KEYS_AVITO: ${{ secrets.KEYS_AVITO }}
      MAX_PRICE_AVITO: ${{ secrets.MAX_PRICE_AVITO }}
      MIN_PRICE_AVITO: ${{ secrets.MIN_PRICE_AVITO }}
      GEO_AVITO: ${{ secrets.GEO_AVITO }}
      PROXY_AVITO: ${{ secrets.PROXY_AVITO }}
      PROXY_CHANGE_IP_AVITO: ${{ secrets.PROXY_CHANGE_IP_AVITO }}
      NEED_MORE_INFO_AVITO: ${{ secrets.NEED_MORE_INFO_AVITO }}
      DEBUG_MODE_AVITO: ${{ secrets.DEBUG_MODE_AVITO }}
      FAST_SPEED_AVITO: ${{ secrets.FAST_SPEED_AVITO }}
      KEYS_BLACK_AVITO: ${{ secrets.KEYS_BLACK_AVITO }}
      MAX_VIEW_AVITO: ${{ secrets.MAX_VIEW_AVITO }}
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Using a common Python version, adjust if needed

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-mock # Install testing libraries

      - name: Run tests
        run: |
          pytest tests/ --cov=./ --cov-report=xml

      # Optional: Upload coverage report if using Codecov or similar
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v3

  build-and-deploy:
    needs: test # Ensure tests pass before building and deploying
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Test Docker container
        run: |
          #!/bin/bash
          set -e # Exit immediately if a command exits with a non-zero status.

          CONTAINER_NAME="avito-parser-test-${GITHUB_RUN_ID}"
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}"
          ENV_FILE=".env.test"
          # SUCCESS_PATTERN="Парсинг завершен" # Using exact match below
          TIMEOUT_SECONDS=180 # 3 minutes timeout
          CHECK_INTERVAL=10

          # Create .env file for the test container
          echo "Creating $ENV_FILE..."
          echo 'URL_AVITO=${{ secrets.URL_AVITO }}' > $ENV_FILE
          echo 'CHAT_ID_TG=${{ secrets.CHAT_ID_TG }}' >> $ENV_FILE
          echo 'TG_TOKEN=${{ secrets.TG_TOKEN }}' >> $ENV_FILE
          echo 'NUM_ADS_AVITO=${{ secrets.NUM_ADS_AVITO }}' >> $ENV_FILE
          echo 'FREQ_AVITO=${{ secrets.FREQ_AVITO }}' >> $ENV_FILE
          echo 'KEYS_AVITO=${{ secrets.KEYS_AVITO }}' >> $ENV_FILE
          echo 'MAX_PRICE_AVITO=${{ secrets.MAX_PRICE_AVITO }}' >> $ENV_FILE
          echo 'MIN_PRICE_AVITO=${{ secrets.MIN_PRICE_AVITO }}' >> $ENV_FILE
          echo 'GEO_AVITO=${{ secrets.GEO_AVITO }}' >> $ENV_FILE
          echo 'PROXY_AVITO=${{ secrets.PROXY_AVITO }}' >> $ENV_FILE
          echo 'PROXY_CHANGE_IP_AVITO=${{ secrets.PROXY_CHANGE_IP_AVITO }}' >> $ENV_FILE
          echo 'NEED_MORE_INFO_AVITO=${{ secrets.NEED_MORE_INFO_AVITO }}' >> $ENV_FILE
          echo 'DEBUG_MODE_AVITO=${{ secrets.DEBUG_MODE_AVITO }}' >> $ENV_FILE
          echo 'FAST_SPEED_AVITO=${{ secrets.FAST_SPEED_AVITO }}' >> $ENV_FILE
          echo 'KEYS_BLACK=${{ secrets.KEYS_BLACK_AVITO }}' >> $ENV_FILE # Use correct secret name
          echo 'MAX_VIEW_AVITO=${{ secrets.MAX_VIEW_AVITO }}' >> $ENV_FILE
          echo "$ENV_FILE created."

          # Cleanup function to stop/remove container and delete env file
          cleanup() {
            echo "Cleaning up test container $CONTAINER_NAME..."
            docker stop $CONTAINER_NAME || echo "Container $CONTAINER_NAME was not running."
            docker rm $CONTAINER_NAME || echo "Container $CONTAINER_NAME could not be removed (may already be gone)."
            rm -f $ENV_FILE
            echo "Cleanup finished."
          }
          # Register the cleanup function to run on script exit (success or failure)
          trap cleanup EXIT

          # Run the container in detached mode
          echo "Starting container $CONTAINER_NAME from image $IMAGE_TAG..."
          docker run -d --name $CONTAINER_NAME --env-file $ENV_FILE $IMAGE_TAG

          # Wait for the container to produce the success log or timeout/crash
          echo "Waiting up to $TIMEOUT_SECONDS seconds for container to produce 'Парсинг завершен' in logs..."
          SECONDS=0
          SUCCESS=false
          while [ $SECONDS -lt $TIMEOUT_SECONDS ]; do
            # Check if container is still running
            if ! docker ps -q -f name=^/${CONTAINER_NAME}$; then
              echo "Error: Container $CONTAINER_NAME stopped unexpectedly."
              echo "--- Container Logs ---"
              docker logs $CONTAINER_NAME || echo "Could not retrieve logs for stopped container."
              echo "----------------------"
              exit 1 # Exit with failure
            fi

            # Check logs for the success pattern
            # Using grep -F for fixed string matching, -q for quiet mode
            if docker logs $CONTAINER_NAME 2>&1 | grep -q -F "Парсинг завершен"; then
              echo "Success: Found 'Парсинг завершен' in logs."
              echo "--- Container Logs (Last 20 lines) ---"
              docker logs $CONTAINER_NAME | tail -n 20
              echo "--------------------------------------"
              SUCCESS=true
              break # Exit the loop on success
            fi

            sleep $CHECK_INTERVAL
            SECONDS=$((SECONDS + CHECK_INTERVAL))
            echo "Still waiting... ($SECONDS/$TIMEOUT_SECONDS seconds)"
          done

          # Check if the loop exited due to success or timeout
          if [ "$SUCCESS" = false ]; then
            echo "Error: Timeout ($TIMEOUT_SECONDS seconds) reached waiting for 'Парсинг завершен'."
            echo "--- Container Logs ---"
            docker logs $CONTAINER_NAME || echo "Could not retrieve logs for running container."
            echo "----------------------"
            exit 1 # Exit with failure
          fi

          # If success, trap will handle cleanup. Exit 0 explicitly.
          exit 0

      - name: Push Docker image
        if: success()
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors' # Replace with actual known_hosts if needed

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            mkdir -p ${{ secrets.APP_LOCATION }} && \
            cd ${{ secrets.APP_LOCATION }} && \
            echo 'URL_AVITO=${{ secrets.URL_AVITO }}' > .env && \
            echo 'CHAT_ID_TG=${{ secrets.CHAT_ID_TG }}' >> .env && \
            echo 'TG_TOKEN=${{ secrets.TG_TOKEN }}' >> .env && \
            echo 'NUM_ADS_AVITO=${{ secrets.NUM_ADS_AVITO }}' >> .env && \
            echo 'FREQ_AVITO=${{ secrets.FREQ_AVITO }}' >> .env && \
            echo 'KEYS_AVITO=${{ secrets.KEYS_AVITO }}' >> .env && \
            echo 'MAX_PRICE_AVITO=${{ secrets.MAX_PRICE_AVITO }}' >> .env && \
            echo 'MIN_PRICE_AVITO=${{ secrets.MIN_PRICE_AVITO }}' >> .env && \
            echo 'GEO_AVITO=${{ secrets.GEO_AVITO }}' >> .env && \
            echo 'PROXY_AVITO=${{ secrets.PROXY_AVITO }}' >> .env && \
            echo 'PROXY_CHANGE_IP_AVITO=${{ secrets.PROXY_CHANGE_IP_AVITO }}' >> .env && \
            echo 'NEED_MORE_INFO_AVITO=${{ secrets.NEED_MORE_INFO_AVITO }}' >> .env && \
            echo 'DEBUG_MODE_AVITO=${{ secrets.DEBUG_MODE_AVITO }}' >> .env && \
            echo 'FAST_SPEED_AVITO=${{ secrets.FAST_SPEED_AVITO }}' >> .env && \
            echo 'KEYS_BLACK=${{ secrets.KEYS_BLACK_AVITO }}' >> .env && \
            echo 'MAX_VIEW_AVITO=${{ secrets.MAX_VIEW_AVITO }}' >> .env && \
            echo 'version: \"3\"' > docker-compose.yml && \
            echo 'services:' >> docker-compose.yml && \
            echo '  avito-parser:' >> docker-compose.yml && \
            echo '    image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}' >> docker-compose.yml && \
            echo '    container_name: avito-parser' >> docker-compose.yml && \
            echo '    restart: unless-stopped' >> docker-compose.yml && \
            echo '    env_file: .env' >> docker-compose.yml && \
            docker compose pull && \
            docker compose down && \
            docker compose up -d && \
            docker logs avito-parser
          "