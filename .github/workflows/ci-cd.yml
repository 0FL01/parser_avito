name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  workflow_dispatch:
      inputs:
        environment:
          description: 'Environment to deploy to'
          required: true
          type: choice
          default: 'dev'
          options:
            - dev
            - base

env:
  DOCKER_IMAGE_NAME: avito-parser
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      URL_AVITO: ${{ secrets.URL_AVITO }}
      CHAT_ID_TG: ${{ secrets.CHAT_ID_TG }}
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      NUM_ADS_AVITO: ${{ secrets.NUM_ADS_AVITO }}
      FREQ_AVITO: ${{ secrets.FREQ_AVITO }}
      KEYS_AVITO: ${{ secrets.KEYS_AVITO }}
      MAX_PRICE_AVITO: ${{ secrets.MAX_PRICE_AVITO }}
      MIN_PRICE_AVITO: ${{ secrets.MIN_PRICE_AVITO }}
      GEO_AVITO: ${{ secrets.GEO_AVITO }}
      PROXY_AVITO: ${{ secrets.PROXY_AVITO }}
      PROXY_CHANGE_IP_AVITO: ${{ secrets.PROXY_CHANGE_IP_AVITO }}
      NEED_MORE_INFO_AVITO: ${{ secrets.NEED_MORE_INFO_AVITO }}
      DEBUG_MODE_AVITO: ${{ secrets.DEBUG_MODE_AVITO }}
      FAST_SPEED_AVITO: ${{ secrets.FAST_SPEED_AVITO }}
      KEYS_BLACK_AVITO: ${{ secrets.KEYS_BLACK_AVITO }}
      MAX_VIEW_AVITO: ${{ secrets.MAX_VIEW_AVITO }}
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
              ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-mock
      - name: Run tests
        run: |
          pytest tests/ --cov=./ --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          if-no-files-found: error

  build-and-test-container:
            needs: test
            runs-on: ubuntu-latest
            outputs:
              sha_short: ${{ steps.vars.outputs.sha_short }}
            steps:
              - uses: actions/checkout@v3
                with:
                  fetch-depth: 0

              - name: Set short SHA
                id: vars
                run: |
                  GIT_SHA=$(git rev-parse --short HEAD)
                  if [ -z "$GIT_SHA" ]; then
                    echo "Error: git rev-parse --short HEAD returned empty string!"
                    exit 1
                  fi
                  echo "sha_short=${GIT_SHA}" >> $GITHUB_OUTPUT
                  echo "Short SHA: ${GIT_SHA}"

              - name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2

              - name: Login to Docker Hub
                uses: docker/login-action@v2
                with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

              - name: Build Docker image
                id: build_image
                uses: docker/build-push-action@v4
                with:
                  context: .
                  push: false
                  load: true
                  tags: |
                    ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
              - name: Test Docker container
                id: test_container
                run: |
                      #!/bin/bash
                      set -e
                      CONTAINER_NAME="avito-parser-test-${GITHUB_RUN_ID}"
                      IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"
                      ENV_FILE=".env.test"
                      PARSING_COMPLETE_PATTERN="Парсинг завершен"
                      FOUND_AD_PATTERN="SUCCESS | __main__:__pretty_log"
                      TIMEOUT_SECONDS=300
                      CHECK_INTERVAL=10

                      echo "Creating $ENV_FILE..."
                      echo 'URL_AVITO=${{ secrets.URL_AVITO }}' > $ENV_FILE
                      echo 'CHAT_ID_TG=${{ secrets.CHAT_ID_TG }}' >> $ENV_FILE
                      echo 'TG_TOKEN=${{ secrets.TG_TOKEN }}' >> $ENV_FILE
                      echo 'NUM_ADS_AVITO=${{ secrets.NUM_ADS_AVITO }}' >> $ENV_FILE
                      echo 'FREQ_AVITO=${{ secrets.FREQ_AVITO }}' >> $ENV_FILE
                      echo 'KEYS_AVITO=${{ secrets.KEYS_AVITO }}' >> $ENV_FILE
                      echo 'MAX_PRICE_AVITO=${{ secrets.MAX_PRICE_AVITO }}' >> $ENV_FILE
                      echo 'MIN_PRICE_AVITO=${{ secrets.MIN_PRICE_AVITO }}' >> $ENV_FILE
                      echo 'GEO_AVITO=${{ secrets.GEO_AVITO }}' >> $ENV_FILE
                      echo 'PROXY_AVITO=${{ secrets.PROXY_AVITO }}' >> $ENV_FILE
                      echo 'PROXY_CHANGE_IP_AVITO=${{ secrets.PROXY_CHANGE_IP_AVITO }}' >> $ENV_FILE
                      echo 'NEED_MORE_INFO_AVITO=${{ secrets.NEED_MORE_INFO_AVITO }}' >> $ENV_FILE
                      echo 'DEBUG_MODE_AVITO=${{ secrets.DEBUG_MODE_AVITO }}' >> $ENV_FILE
                      echo 'FAST_SPEED_AVITO=${{ secrets.FAST_SPEED_AVITO }}' >> $ENV_FILE
                      echo 'KEYS_BLACK_AVITO=${{ secrets.KEYS_BLACK_AVITO }}' >> $ENV_FILE
                      echo 'MAX_VIEW_AVITO=${{ secrets.MAX_VIEW_AVITO }}' >> $ENV_FILE
                      echo "$ENV_FILE created."

                      cleanup() {
                        echo "Cleaning up test container $CONTAINER_NAME..."
                        docker stop $CONTAINER_NAME || echo "Container $CONTAINER_NAME was not running."
                        docker rm $CONTAINER_NAME || echo "Container $CONTAINER_NAME could not be removed (may already be gone)."
                        rm -f $ENV_FILE
                        echo "Cleanup finished."
                      }
                      trap cleanup EXIT

                      echo "Starting container $CONTAINER_NAME from image $IMAGE_TAG..."
                      docker run -d --name $CONTAINER_NAME --env-file $ENV_FILE $IMAGE_TAG

                      echo "Waiting up to $TIMEOUT_SECONDS seconds for container to produce '$PARSING_COMPLETE_PATTERN' OR '$FOUND_AD_PATTERN' in logs..."
                      SECONDS=0
                      SUCCESS=false
                      while [ $SECONDS -lt $TIMEOUT_SECONDS ]; do
                        if ! docker ps -q -f name=^/${CONTAINER_NAME}$; then
                          echo "Error: Container $CONTAINER_NAME stopped unexpectedly."
                          echo "--- Container Logs ---"
                          docker logs $CONTAINER_NAME || echo "Could not retrieve logs for stopped container."
                          echo "----------------------"
                          exit 1
                        fi
                        if docker logs $CONTAINER_NAME 2>&1 | grep -q -E "$PARSING_COMPLETE_PATTERN|$FOUND_AD_PATTERN"; then
                          echo "Success: Found '$PARSING_COMPLETE_PATTERN' or '$FOUND_AD_PATTERN' in logs."
                          echo "--- Container Logs (Last 20 lines) ---"
                          docker logs $CONTAINER_NAME | tail -n 20
                          echo "--------------------------------------"
                          SUCCESS=true
                          break
                        fi
                        sleep $CHECK_INTERVAL
                        SECONDS=$((SECONDS + CHECK_INTERVAL))
                        echo "Still waiting... (${SECONDS}/${TIMEOUT_SECONDS} seconds)"
                      done

                      if [ "$SUCCESS" = false ]; then
                        echo "Error: Timeout ($TIMEOUT_SECONDS seconds) reached waiting for '$PARSING_COMPLETE_PATTERN' or '$FOUND_AD_PATTERN'."
                        echo "--- Container Logs ---"
                        docker logs $CONTAINER_NAME || echo "Could not retrieve logs for running container."
                        echo "----------------------"
                        exit 1
                      fi
                      exit 0

              - name: Push Docker image
                if: success()
                run: |
                  IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"
                  echo "Pushing image ${IMAGE_TAG}..."
                  docker push ${IMAGE_TAG}

  deploy-dev:
    needs: build-and-test-container
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'placeholder'

      - name: Deploy to dev server
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          APP_LOCATION: ${{ secrets.APP_LOCATION }}
          URL_AVITO: ${{ secrets.URL_AVITO }}
          CHAT_ID_TG: ${{ secrets.CHAT_ID_TG }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          NUM_ADS_AVITO: ${{ secrets.NUM_ADS_AVITO }}
          FREQ_AVITO: ${{ secrets.FREQ_AVITO }}
          KEYS_AVITO: ${{ secrets.KEYS_AVITO }}
          MAX_PRICE_AVITO: ${{ secrets.MAX_PRICE_AVITO }}
          MIN_PRICE_AVITO: ${{ secrets.MIN_PRICE_AVITO }}
          GEO_AVITO: ${{ secrets.GEO_AVITO }}
          PROXY_AVITO: ${{ secrets.PROXY_AVITO }}
          PROXY_CHANGE_IP_AVITO: ${{ secrets.PROXY_CHANGE_IP_AVITO }}
          NEED_MORE_INFO_AVITO: ${{ secrets.NEED_MORE_INFO_AVITO }}
          DEBUG_MODE_AVITO: ${{ secrets.DEBUG_MODE_AVITO }}
          FAST_SPEED_AVITO: ${{ secrets.FAST_SPEED_AVITO }}
          KEYS_BLACK_AVITO: ${{ secrets.KEYS_BLACK_AVITO }}
          MAX_VIEW_AVITO: ${{ secrets.MAX_VIEW_AVITO }}
          SHORT_SHA: ${{ needs.build-and-test-container.outputs.sha_short }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
        run: |
          if [ -z "$SHORT_SHA" ]; then
            echo "Error: SHORT_SHA is empty. Cannot proceed with deployment."
            exit 1
          fi

          FULL_IMAGE_NAME="${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${SHORT_SHA}"
          CONTAINER_NAME="avito-parser"
          SSH_TARGET="${SSH_USERNAME}@${SSH_HOST}"

          echo "Deploying image $FULL_IMAGE_NAME to $SSH_TARGET:$APP_LOCATION"

          cat << EOF > .env.dev.local
          URL_AVITO=$URL_AVITO
          CHAT_ID_TG=$CHAT_ID_TG
          TG_TOKEN=$TG_TOKEN
          NUM_ADS_AVITO=$NUM_ADS_AVITO
          FREQ_AVITO=$FREQ_AVITO
          KEYS_AVITO=$KEYS_AVITO
          MAX_PRICE_AVITO=$MAX_PRICE_AVITO
          MIN_PRICE_AVITO=$MIN_PRICE_AVITO
          GEO_AVITO=$GEO_AVITO
          PROXY_AVITO=$PROXY_AVITO
          PROXY_CHANGE_IP_AVITO=$PROXY_CHANGE_IP_AVITO
          NEED_MORE_INFO_AVITO=$NEED_MORE_INFO_AVITO
          DEBUG_MODE_AVITO=$DEBUG_MODE_AVITO
          FAST_SPEED_AVITO=$FAST_SPEED_AVITO
          KEYS_BLACK_AVITO=$KEYS_BLACK_AVITO
          MAX_VIEW_AVITO=$MAX_VIEW_AVITO
          EOF

          cat << EOF > docker-compose.dev.local
          version: "3.8"
          services:
            avito-parser:
              image: ${FULL_IMAGE_NAME}
              container_name: ${CONTAINER_NAME}
              restart: unless-stopped
              env_file:
                - .env
          EOF

          echo "Copying configuration files to dev server..."
          scp -o StrictHostKeyChecking=no -P "$SSH_PORT" .env.dev.local docker-compose.dev.local "$SSH_TARGET":/tmp/

          echo "Executing deployment commands on dev server..."
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_TARGET" "
            mkdir -p \"$APP_LOCATION\" && \
            mv /tmp/.env.dev.local \"$APP_LOCATION/.env\" && \
            mv /tmp/docker-compose.dev.local \"$APP_LOCATION/docker-compose.yml\" && \
            cd \"$APP_LOCATION\" && \
            echo '--- Pulling new image $FULL_IMAGE_NAME ---' && \
            docker compose pull && \
            echo '--- Stopping existing container (if any) ---' && \
            docker compose down || true && \
            echo '--- Starting new container ---' && \
            docker compose up -d && \
            echo '--- Cleaning up old images ---' && \
            docker image prune -af && \
            echo '--- Deployment logs (dev) ---' && \
            docker compose logs --tail 50
          "
          rm .env.dev.local docker-compose.dev.local

  deploy-base:
            needs: build-and-test-container
            if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'base')
            runs-on: ubuntu-latest
            environment: base
            steps:
              - uses: actions/checkout@v3

              - name: Install SSH key
                uses: shimataro/ssh-key-action@v2
                with:
                  key: ${{ secrets.SSH_PRIVATE_KEY_BASE }}
                  known_hosts: 'placeholder'

              - name: Deploy to base server using Docker Compose
                env:
                  SSH_USERNAME_BASE: ${{ secrets.SSH_USERNAME_BASE }}
                  SSH_HOST_BASE: ${{ secrets.SSH_HOST_BASE }}
                  SSH_PORT_BASE: ${{ secrets.SSH_PORT_BASE }}
                  APP_LOCATION_BASE: ${{ secrets.APP_LOCATION_BASE }}
                  URL_AVITO_BASE: ${{ secrets.URL_AVITO_BASE }}
                  CHAT_ID_TG_BASE: ${{ secrets.CHAT_ID_TG_BASE }}
                  TG_TOKEN_BASE: ${{ secrets.TG_TOKEN_BASE }}
                  NUM_ADS_AVITO_BASE: ${{ secrets.NUM_ADS_AVITO_BASE }}
                  FREQ_AVITO_BASE: ${{ secrets.FREQ_AVITO_BASE }}
                  KEYS_AVITO_BASE: ${{ secrets.KEYS_AVITO_BASE }}
                  MAX_PRICE_AVITO_BASE: ${{ secrets.MAX_PRICE_AVITO_BASE }}
                  MIN_PRICE_AVITO_BASE: ${{ secrets.MIN_PRICE_AVITO_BASE }}
                  GEO_AVITO_BASE: ${{ secrets.GEO_AVITO_BASE }}
                  PROXY_AVITO_BASE: ${{ secrets.PROXY_AVITO_BASE }}
                  PROXY_CHANGE_IP_AVITO_BASE: ${{ secrets.PROXY_CHANGE_IP_AVITO_BASE }}
                  NEED_MORE_INFO_AVITO_BASE: ${{ secrets.NEED_MORE_INFO_AVITO_BASE }}
                  DEBUG_MODE_AVITO_BASE: ${{ secrets.DEBUG_MODE_AVITO_BASE }}
                  FAST_SPEED_AVITO_BASE: ${{ secrets.FAST_SPEED_AVITO_BASE }}
                  KEYS_BLACK_AVITO_BASE: ${{ secrets.KEYS_BLACK_AVITO_BASE }}
                  MAX_VIEW_AVITO_BASE: ${{ secrets.MAX_VIEW_AVITO_BASE }}
                  SHORT_SHA: ${{ needs.build-and-test-container.outputs.sha_short }}
                  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
                  DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
                run: |
                      if [ -z "$SHORT_SHA" ]; then
                        echo "Error: SHORT_SHA is empty. Cannot proceed with deployment."
                        exit 1
                      fi

                      FULL_IMAGE_NAME="${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${SHORT_SHA}"
                      CONTAINER_NAME="avito-parser-base"
                      APP_LOCATION="$APP_LOCATION_BASE"
                      SSH_TARGET="${SSH_USERNAME_BASE}@${SSH_HOST_BASE}"
                      SSH_PORT="$SSH_PORT_BASE"

                      echo "Deploying image $FULL_IMAGE_NAME to $SSH_TARGET:$APP_LOCATION"

                      cat << EOF > .env.base.local
                      URL_AVITO=$URL_AVITO_BASE
                      CHAT_ID_TG=$CHAT_ID_TG_BASE
                      TG_TOKEN=$TG_TOKEN_BASE
                      NUM_ADS_AVITO=$NUM_ADS_AVITO_BASE
                      FREQ_AVITO=$FREQ_AVITO_BASE
                      KEYS_AVITO=$KEYS_AVITO_BASE
                      MAX_PRICE_AVITO=$MAX_PRICE_AVITO_BASE
                      MIN_PRICE_AVITO=$MIN_PRICE_AVITO_BASE
                      GEO_AVITO=$GEO_AVITO_BASE
                      PROXY_AVITO=$PROXY_AVITO_BASE
                      PROXY_CHANGE_IP_AVITO=$PROXY_CHANGE_IP_AVITO_BASE
                      NEED_MORE_INFO_AVITO=$NEED_MORE_INFO_AVITO_BASE
                      DEBUG_MODE_AVITO=$DEBUG_MODE_AVITO_BASE
                      FAST_SPEED_AVITO=$FAST_SPEED_AVITO_BASE
                      KEYS_BLACK_AVITO=$KEYS_BLACK_AVITO_BASE
                      MAX_VIEW_AVITO=$MAX_VIEW_AVITO_BASE
                      EOF

                      cat << EOF > docker-compose.base.local
                      version: "3.8"
                      services:
                        avito-parser-base:
                          image: ${FULL_IMAGE_NAME}
                          container_name: ${CONTAINER_NAME}
                          restart: unless-stopped
                          env_file:
                            - .env
                      EOF

                      echo "Copying configuration files to base server..."
                      scp -o StrictHostKeyChecking=no -P "$SSH_PORT" .env.base.local docker-compose.base.local "$SSH_TARGET":/tmp/

                      echo "Executing deployment commands on base server..."
                      ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_TARGET" "
                        mkdir -p \"$APP_LOCATION\" && \
                        mv /tmp/.env.base.local \"$APP_LOCATION/.env\" && \
                        mv /tmp/docker-compose.base.local \"$APP_LOCATION/docker-compose.yml\" && \
                        cd \"$APP_LOCATION\" && \
                        echo '--- Pulling new image $FULL_IMAGE_NAME ---' && \
                        docker compose pull && \
                        echo '--- Stopping existing container (if any) ---' && \
                        docker compose down || true && \
                        echo '--- Starting new container ---' && \
                        docker compose up -d && \
                        echo '--- Cleaning up old images ---' && \
                        docker image prune -af && \
                        echo '--- Deployment logs (base) ---' && \
                        docker compose logs --tail 50
                      "
                      rm .env.base.local docker-compose.base.local